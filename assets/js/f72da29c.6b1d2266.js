"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3402],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var m=a.createContext({}),s=function(e){var t=a.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(r),f=n,d=p["".concat(m,".").concat(f)]||p[f]||u[f]||o;return r?a.createElement(d,i(i({ref:t},c),{},{components:r})):a.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},339:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={title:"DataSet.from_regex"},i=void 0,l={unversionedId:"reference/DataSet/from_regex",id:"reference/DataSet/from_regex",title:"DataSet.from_regex",description:"You should be familiar with regular expressions before using this method. If you are not, you can read this tutorial to learn the basics.",source:"@site/docs/reference/DataSet/from_regex.md",sourceDirName:"reference/DataSet",slug:"/reference/DataSet/from_regex",permalink:"/documentation/docs/reference/DataSet/from_regex",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/DataSet/from_regex.md",tags:[],version:"current",frontMatter:{title:"DataSet.from_regex"},sidebar:"referenceSidebar",previous:{title:"DataSet.from_files",permalink:"/documentation/docs/reference/DataSet/from_files"},next:{title:"DataSet.clear",permalink:"/documentation/docs/reference/DataSet/clear"}},m={},s=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}],c={toc:s};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"You should be familiar with regular expressions before using this method. If you are not, you can read ",(0,n.kt)("a",{parentName:"p",href:"https://www.w3schools.com/python/python_regex.asp"},"this tutorial")," to learn the basics.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'FileData.from_regex(\n    regex,\n    dir="",\n    name_format="",\n    **kwargs,\n)\n')),(0,n.kt)("p",null,"Loads data from a regular expression and builds the context from the matching file names and given format."),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"regex: str")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The regular expression to use to find the files.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"dir: str")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The directory where the files are located.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"name_format: str")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The name format of the files. This is used to build the context object from the file names. For example, if the regex matches against the file names ",(0,n.kt)("inlineCode",{parentName:"li"},"temperature=15K.csv")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"temperature=20K.csv"),", and the name format is ",(0,n.kt)("inlineCode",{parentName:"li"},"temperature={temp}K.csv"),", then the context will have the values ",(0,n.kt)("inlineCode",{parentName:"li"},'"15"')," and ",(0,n.kt)("inlineCode",{parentName:"li"},'"20"')," associated to the key ",(0,n.kt)("inlineCode",{parentName:"li"},'"temp"'),".")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"kwargs: dict")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The same keyword arguments as for the ",(0,n.kt)("inlineCode",{parentName:"li"},"FileData.from_file")," method. These are passed to the ",(0,n.kt)("inlineCode",{parentName:"li"},"FileData.from_file")," method for each file. See ",(0,n.kt)("a",{parentName:"li",href:"/docs/reference/FileData/from_file"},"the documentation for the ",(0,n.kt)("inlineCode",{parentName:"a"},"FileData.from_file")," method")," for more details.")),(0,n.kt)("h2",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"FileData")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A ",(0,n.kt)("inlineCode",{parentName:"li"},"FileData")," instance that contains the data from the files whose names matched against the regex and the context as built from the file names and the name format.")),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("p",null,"Assume the following file structure:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"my-project/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 height=40m_width=15m.csv\n|   \u251c\u2500\u2500 height=40m_width=20m.csv\n\u2502   \u2514\u2500\u2500 height=40m_width=25m.csv\n\u2514\u2500\u2500 main.py\n")),(0,n.kt)("p",null,"Then, the following code will load the data from the three files:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from quyckplot import FileData\n\nds = DataSet.from_regex(\n    regex="height=40m_width=.*.csv",\n    dir="data",\n    name_format="height=40m_width={width}m.csv",\n)\n')))}p.isMDXComponent=!0}}]);