"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3725],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,u=p["".concat(m,".").concat(d)]||p[d]||c[d]||o;return n?a.createElement(u,i(i({ref:t},f),{},{components:n})):a.createElement(u,i({ref:t},f))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"DataSet.from_files"},i=void 0,l={unversionedId:"reference/DataSet/from_files",id:"reference/DataSet/from_files",title:"DataSet.from_files",description:"Parameters",source:"@site/docs/reference/DataSet/from_files.md",sourceDirName:"reference/DataSet",slug:"/reference/DataSet/from_files",permalink:"/documentation/docs/reference/DataSet/from_files",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/DataSet/from_files.md",tags:[],version:"current",frontMatter:{title:"DataSet.from_files"},sidebar:"referenceSidebar",previous:{title:"Overview",permalink:"/documentation/docs/reference/DataSet/"},next:{title:"DataSet.from_regex",permalink:"/documentation/docs/reference/DataSet/from_regex"}},m={},s=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}],f={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'DataSet.from_files(\n    file_names,\n    dir="",\n    name_format="",\n    **kwargs,\n)\n')),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"file_names: list","[str]")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The names of the files to load.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dir: str")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The directory where the files are located.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"name_format: str")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name format of the files. This is used to build the context object from the file names. For example, if the file names are ",(0,r.kt)("inlineCode",{parentName:"li"},"temperature=15K.csv")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"temperature=20K.csv"),", and the name format is ",(0,r.kt)("inlineCode",{parentName:"li"},"temperature={temp}K.csv"),", then the context will have the values ",(0,r.kt)("inlineCode",{parentName:"li"},'"15"')," and ",(0,r.kt)("inlineCode",{parentName:"li"},'"20"')," associated to the key ",(0,r.kt)("inlineCode",{parentName:"li"},'"temp"'),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"kwargs: dict")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The same keyword arguments as for the ",(0,r.kt)("inlineCode",{parentName:"li"},"FileData.from_file")," method. These are passed to the ",(0,r.kt)("inlineCode",{parentName:"li"},"FileData.from_file")," method for each file. See ",(0,r.kt)("a",{parentName:"li",href:"/docs/reference/FileData/from_file"},"the documentation for the ",(0,r.kt)("inlineCode",{parentName:"a"},"FileData.from_file")," method")," for more details.")),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"DataSet")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"DataSet")," instance that contains an array of ",(0,r.kt)("inlineCode",{parentName:"li"},"FileData")," instances with the data from the files and the context as built from the file names and the name format.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Assume the following file structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my-project/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 height=40m_width=15m.csv\n|   \u251c\u2500\u2500 height=40m_width=20m.csv\n\u2502   \u2514\u2500\u2500 height=40m_width=25m.csv\n\u2514\u2500\u2500 main.py\n")),(0,r.kt)("p",null,"Then, the following code will load the data from the three files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from quyckplot import DataSet\n\nds = DataSet.from_files(\n    file_names=[\n        "height=40m_width=15m.csv",\n        "height=40m_width=20m.csv",\n        "height=40m_width=25m.csv",\n    ],\n    dir="data",\n    name_format="height={height}m_width={width}m.csv",\n)\n')),(0,r.kt)("p",null,"Loads data from a list of files and builds the context from the given file names and name format."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In this case, instead of manually specifying the file names, you could use a list comprehension to generate the file names from a list of heights and widths:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'file_names = [f"height=40m_width={width}m.csv" for height in [15, 20, 25]]\n'))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Even better, you could (and should) use the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataSet.from_regex")," method instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"DataSet.from_files"),". This will allow you to use regular expressions to match the file names and extract the context from them. See the ",(0,r.kt)("a",{parentName:"p",href:"/documentation/docs/reference/DataSet/from_regex"},"DataSet.from_regex")," documentation for more information.")))}p.isMDXComponent=!0}}]);