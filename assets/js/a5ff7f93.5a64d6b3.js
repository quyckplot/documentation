"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7154],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=m(n),f=r,d=c["".concat(p,".").concat(f)]||c[f]||u[f]||l;return n?a.createElement(d,i(i({ref:t},s),{},{components:n})):a.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7038:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const l={title:"FileData.from_file"},i=void 0,o={unversionedId:"reference/FileData/from_file",id:"reference/FileData/from_file",title:"FileData.from_file",description:"Parameters",source:"@site/docs/reference/FileData/from_file.md",sourceDirName:"reference/FileData",slug:"/reference/FileData/from_file",permalink:"/documentation/docs/reference/FileData/from_file",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/FileData/from_file.md",tags:[],version:"current",frontMatter:{title:"FileData.from_file"},sidebar:"referenceSidebar",previous:{title:"Overview",permalink:"/documentation/docs/reference/FileData/"},next:{title:"Overview",permalink:"/documentation/docs/reference/DataSet/"}},p={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}],s={toc:m};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'FileData.from_file(\n    file_name,\n    dir="",\n    name_format="",\n    **kwargs,\n)\n')),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"file_name: str")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name of the file to load.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dir: str")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The directory where the file is located.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"name_format: str")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name format of the file. This is used to build the context object from the file name. For example, if the file name is ",(0,r.kt)("inlineCode",{parentName:"li"},"temperature=15K.csv"),", and the name format is ",(0,r.kt)("inlineCode",{parentName:"li"},"temperature={temp}K.csv"),", then the context will have the value ",(0,r.kt)("inlineCode",{parentName:"li"},'"15"')," associated to the key ",(0,r.kt)("inlineCode",{parentName:"li"},'"temp"'),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"kwargs: dict")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Any other keyword arguments are passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"pandas.read_csv")," function. See the ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html"},"pandas documentation")," for more information. These include:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"names: list","[str]")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The names of the columns in the file."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"skiprows: int")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The number of rows to skip at the beginning of the file."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sep: str")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The separator to use to split the columns.")))))),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FileData")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"FileData")," instance that contains the data from the file and the context as built from the file name and the name format.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Assume the following file structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my-project/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 height=40m_width=15m.csv\n\u2514\u2500\u2500 main.py\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"height=40m_width=15m.csv")," has two columns that correspond, respectively, to some time and some displacement, from ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py"),", you can load the with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from quyckplot import FileData # Import the class\n\ndata = FileData.from_file(\n    "height=40m_width=15m.csv", # The name of the file\n    dir="data", # The directory where the file is located\n    name_format="height={height}m_width={width}m.csv", # The name format of the file\n    names=["time", "displacement"], # The names of the columns\n)\n\n')),(0,r.kt)("p",null,"It this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," variable will be a ",(0,r.kt)("inlineCode",{parentName:"p"},"FileData")," instance that contains the data from the file and the following context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "height": "40",\n    "width": "15",\n}\n')))}c.isMDXComponent=!0}}]);